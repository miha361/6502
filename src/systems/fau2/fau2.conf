# sbc-default
#  this config implements a single-board computer with following specs:
#    4k ROM monitor program
#     

# we want a monitor program running on our sbc.
# the start address of system and vectors are configured in section "system"
# this section only describes the monitor itself.
monitor:
{
	monitor_size = 0x1000;   	/* 4k */
	monitor_addr = 0xf000;		/* start address of monitor programm */
	monitor_rom  = "/usr/local/lib/6502/monitor/monitor-sbc-default.bin"
}

# system configuration
system:
{
	sp = 0;
	pc = 0xefff;			/* initial pc state */
	vector_reset = 0xefff;
	vector_irq = 0xf010;
	vector_nmi = 0xf020;
	start_paused = 0;
	speed = 985;	/* khz */
	cpu = 6502;
	cpu_opcodes = 0;	/* 0 = all available ops for cpu/cpu-family */
	debugger = 1;
	io_modules = [ "ram", "rom", "ser", "ser-emu", "7seg", "hexkey", "rng", "beep", "gfx" ];

	sdl_ui = 1;
}

# do you want access to the debugger via telnet?
debugger:
{
	accept_only_from_localhost = 1;
	port = 6464;
	username = "debug";
	password = "master";
	banner = "~/.6502/banner.debugger";
}

# you can load up to 128 plain memory images on startup
images:
{
	images_active = "0,1,2,3,4,5,6,7,8,9,15,23,55,109,83,24,42";
	#image_file_0 = "/path/to/your/image/file";
	#image_addr_0 = "0x3333";
	#image_size_0 = "0x00ff";

}

# random access memory. if unconfigured, every byte in address space not
# dedicated to something will be regular RAM.
ram:
{
	/* ram has no configuration options - yet */
}

# rom section says which regions are read only
# you can unlock a read only section by a special r/w sequence on some registers
rom:
{
	start = 0xf000;
	end = 0xfff9;	/* we want the monitor read-only, cpu-vectors are r/w */
	unlock_base = "0xf333";
	unlock_size = 33;
}

# map a REAL serial port to a given memory address, the serial port emulated is
# our virtual-6502-serial. see documentation/virtual-6502-serial.txt for 
# programming instructions.
ser:
{
	serial_port = "/dev/ttyUSB3";
	serial_baud = 115200;
	serial_databits = 8;
	serial_parity = "none";	/* none/even/odd */
	serial_stopbits = 1;

	serial_rx_register = "0xb0";
	serial_tx_register = "0xb1";
	serial_rx_flag = "0xb2:0";
	serial_tx_flag = "0xb2:1";
	serial_error_flags = "0xb2:23";
	serial_status_flags = "0xb2:4567";
}

# ser-emu emulates a virtual-6502-serial via a telnet connection.
# in default configuration simply type "$ telnet localhost 32768"
# default username/password: "monitor/master".
ser-emu:
{
	accept_from = "0.0.0.0";
	port = 32768;
	banner = "~/.6502/banner.ser-emu";
	username = "monitor";
	password = "master";
	serial_rx_register = "0xb0";
	serial_tx_register = "0xb1";
	serial_rx_flag = "0xb2:0";
	serial_tx_flag = "0xb2:1";
	serial_error_flags = "0xb2:23"
	serial_status_flags = "0xb2:4567"
}

# this emulates an mmio-attached 7seg display, variable length
7seg:
{
	digits = 8;
	base_addr = "0xc0";
	refresh_cycle = 10;	/* 1hz-50hz */
}

gfx:
{
	base_addr = "0x7000";

}

hexkey:
{
	addr0to7 = "0xd0";
	addr8toF = "0xd1";
	read_cycle = 50;	/* 1hz-250hz */
}

rng:
{
	base_addr = "0xe0";
	update_on_read = 1;
	frequently_update = 0;
	frequently_update_frequency = 10;	/* 1hz-10khz */
}

beep:
{
	volume_addr = "0xf0";
	frequency_addr_h = "0xf1";
	frequency_addr_l = "0xf2";
	mode = 0;
}

sdl_ui:
{
	size = "950x700";
	bpp = 24;
	title_bar_hide = 1;
	title_bar_text = "SDL-6502 > sbc-default (%S,%T)";
	fullscreen = 0;
}
	
